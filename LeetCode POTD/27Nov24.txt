class Solution {
public:
    int shortestPath(vector<int>adj[],int n)
    {
        vector<int> dist(n, 1e9);
        dist[0]=0;
        queue<int>q;
        q.push(0);
        while(q.size()>0)
        {
            int node=q.front();
            q.pop();
            for(auto it:adj[node])
            {
                if(dist[node]+1<dist[it])
                {
                    dist[it]=1+dist[node];
                    q.push(it);
                }
            }
        }
        return dist[n-1];
    }
    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {
        vector<int>adj[n];
        for(int i=0;i<n-1;i++)
        {
            adj[i].push_back(i+1);
        }
        vector<int>res;
        for(int i=0;i<queries.size();i++)
        {
            adj[queries[i][0]].push_back(queries[i][1]);
            res.push_back(shortestPath(adj,n));
        }
        return res;
    }
};