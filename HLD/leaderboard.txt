HLD of LeaderBoard.

Functional Requirements : 
1. Rankings should be given to users based on score/time or given metric.
2. As soon as score is updated, immediately scoreboard rankings should get updated.
3. get the history and tracking of a user for his/her ranking.
4. fetch the top N users based on score of a game.
5. Support for multiple leaderboard based on region or event. 

Non Functional Requirements : 
1. High Availability.
2. Low Latency. 
3. Strong Consistency.
4. Scalability.

DB Schema :
First to store user details we can use a sql db with details 
CREATE TABLE users (
	user_id INT PRIMARY KEY,
	user_name VARCHAR(50) , 
	game_id VARCHAR(50) ,
	score Decimal(10,2) , 
	playedAt TimeStamp
);
we can use sql db to get the tracking and history of a user.

to fetch the rankings we need to have them always sorted. To efficiently achieve that we can use redis sorted sets
and store the data in a redis db. From the in memory cache fetching will also be faster.
ZADD leaderboard:game123:US:summerEvent 1500 "user_001"
ZADD leaderboard:game123:US:summerEvent 1800 "user_002"
 ZADD command is used to add one or more members to a sorted set
API Design : 
Get call to get rankings
api/leaderboard/v1/GameRankings/{gameId}/{sortParameter}/{limit(N)}

Response 
{
	{	
		user : 
			.
			.
			.
	},
	{	
		user : 
			.
			.
			.
	},
	{	
		user : 
			.
			.
			.
	},
}
200 OK 

Get Call to get user details 
api/leaderboard/v1/userDetails/{userId}

Response :
{
	user : 
	.
	.
	.
	.
}
200 OK

update score 
Post call
api/leaderboard/v1/updateScore
Request
{
	userId : 
	game_id : 
	Score : 
	TimeStamp :
}

Response {
201 Created
}


HLD structure :

User -->  Server(distributed one with pods)---> load balancer---> if it is about fetching rankings or gameboard --> redis DB --> redis in memoryCache
																		|
																		|
																		|
																		v
																		if it is about playerdetails --> sql DB
																				|
																				|
																				v
																				cache
																				
Further details like sharding of sql db, replication of redis db for persistance, logging and metrics can also be added
																		