check if ith bit is set or not
if(n&(1<<i))>0 == true 
if(n>>i)&1)>0 == true

set ith bit 

n|(1<<i)



Swap Two Numbers Without a Third Variable
You can swap two numbers using bitwise XOR operation without needing a temporary variable. Here’s how you can do it:

Given:

Two numbers a and b
Steps:

XOR a and b, and store the result in a:

𝑎
=
𝑎
⊕
𝑏
a=a⊕b
XOR the new value of a with b to get the original value of a, and store it in b:

𝑏
=
𝑎
⊕
𝑏
b=a⊕b
XOR the new value of b with a to get the original value of b, and store it in a:

𝑎
=
𝑎
⊕
𝑏
a=a⊕b
Example:

cpp
Copy code
int a = 5; // 0101 in binary
int b = 7; // 0111 in binary

// Step 1
a = a ^ b; // a = 0101 ^ 0111 = 0010 (2 in decimal)

// Step 2
b = a ^ b; // b = 0010 ^ 0111 = 0101 (5 in decimal)

// Step 3
a = a ^ b; // a = 0010 ^ 0101 = 0111 (7 in decimal)
After these steps:

a will be 7
b will be 5
2. Check if a Number is a Power of 2
A number n is a power of 2 if it has exactly one bit set to 1. You can check this with the following condition:

cpp
Copy code
(n & (n - 1)) == 0
Explanation:

For a number that is a power of 2, it has exactly one 1 in its binary representation (e.g., 0001, 0010, 0100).
Subtracting 1 from this number flips all the bits to the right of the 1 and changes the 1 to 0 (e.g., 0010 - 1 = 0001).
The result of n & (n - 1) will be 0 if n is a power of 2.
Example:

cpp
Copy code
int n = 16; // 10000 in binary
if ((n & (n - 1)) == 0) {
    // n is a power of 2
}
3. Count the Number of Set Bits (Hamming Weight)
To count the number of 1s in the binary representation of a number, use the following method:

cpp
Copy code
int countSetBits(int n) {
    int count = 0;
    while (n) {
        count++;
        n = n & (n - 1); // This operation clears the least significant bit set
    }
    return count;
}
Explanation:

n & (n - 1) clears the least significant 1 bit in n.
Repeating this operation counts the number of 1 bits.
4. Find the Rightmost Set Bit
To find the position of the rightmost set bit (least significant 1 bit) in n:

cpp
Copy code
int rightmostSetBit = n & -n;
Explanation:

-n is the two’s complement of n, which effectively isolates the rightmost set bit.
Example:

cpp
Copy code
int n = 12; // 1100 in binary
int rightmostSetBit = n & -n; // 0100 (4 in decimal)
5. Set the ith Bit
To set the ith bit of a number n to 1:

cpp
Copy code
n = n | (1 << i);
Example:

cpp
Copy code
int n = 5; // 0101 in binary
int i = 1;
n = n | (1 << i); // Sets the 1st bit, resulting in 0111 (7 in decimal)
6. Clear the ith Bit
To clear the ith bit of a number n (set it to 0):

cpp
Copy code
n = n & ~(1 << i);
Example:

cpp
Copy code
int n = 7; // 0111 in binary
int i = 1;
n = n & ~(1 << i); // Clears the 1st bit, resulting in 0011 (3 in decimal)
7. Toggle the ith Bit
To toggle the ith bit of a number n:

cpp
Copy code
n = n ^ (1 << i);
Example:

cpp
Copy code
int n = 5; // 0101 in binary
int i = 2;
n = n ^ (1 << i); // Toggles the 2nd bit, resulting in 0001 (1 in decimal)
These tricks and formulas can help you solve various problems related to bit manipulation efficiently.

1's Complement
1's Complement of a Binary Number:

Flip all the bits of the number. If the number is 1010, its 1's complement is 0101.
To Find 1's Complement:

For a binary number b, the 1's complement is calculated as:
1’s Complement
(
𝑏
)
=
NOT
(
𝑏
)
1’s Complement(b)=NOT(b)
This can be implemented by flipping each bit.
2's Complement
2's Complement of a Binary Number:

Take the 1's complement of the number and then add 1 to the result.
Example: For 1010:
1's Complement: 0101
Adding 1: 0101 + 1 = 0110
So, the 2's complement is 0110.
To Find 2's Complement:

For a binary number b, the 2's complement is:
2’s Complement
(
𝑏
)
=
NOT
(
𝑏
)
+
1
2’s Complement(b)=NOT(b)+1
This can be done by flipping each bit (1's complement) and adding 1.
Bit Operators
AND Operator (&):

Binary AND operation between two bits:
A AND B
=
1 if both A and B are 1, else 0
A AND B=1 if both A and B are 1, else 0
OR Operator (|):

Binary OR operation between two bits:
A OR B
=
1 if either A or B is 1, else 0
A OR B=1 if either A or B is 1, else 0
XOR Operator (^):

Binary XOR operation between two bits:
A XOR B
=
1 if A and B are different, else 0
A XOR B=1 if A and B are different, else 0
NOT Operator (~):

Binary NOT operation (bitwise negation):
NOT
(
𝐴
)
=
Inverts all bits of A
NOT(A)=Inverts all bits of A
In a fixed-width system, this means flipping all bits.
Left Shift Operator (<<):

Shifts bits to the left:
𝐴
<
<
𝑛
=
Shift A’s bits left by n positions
A<<n=Shift A’s bits left by n positions
This operation multiplies the number by 
2
𝑛
2 
n
 .
Right Shift Operator (>>):

Shifts bits to the right:
𝐴
>
>
𝑛
=
Shift A’s bits right by n positions
A>>n=Shift A’s bits right by n positions
This operation divides the number by 
2
𝑛
2 
n
 , with sign extension in signed numbers.
Unsigned Right Shift Operator (>>>) (in languages like Java):

Shifts bits to the right, filling in zeros:
𝐴
>
>
>
𝑛
=
Shift A’s bits right by n positions, filling in with zeros
A>>>n=Shift A’s bits right by n positions, filling in with zeros
Other Useful Formulas
Bit Masking:

To isolate a specific bit or group of bits:
result
=
value
&
mask
result=value&mask
For example, to get the 3rd bit from the right:
result
=
value
&
(
1
<
<
3
)
result=value&(1<<3)






