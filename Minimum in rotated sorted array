class Solution
{
public:
    int findMin(vector<int> &nums)
    {
       // Initialize the result with the first element of the array
        int res = nums[0];

        // Initialize left and right pointers for binary search
        int l = 0;
        int r = nums.size() - 1;

         // Perform binary search
        while (l <= r)
        {   
            // Check if the subarray is already sorted
            if (nums[l] < nums[r])
            {
                res = min(res, nums[l]);
                break;
            }
            
            // Compute the midpoint
            int mid = l + (r - l) / 2;
            res = min(res, nums[mid]);

            // Determine if the midpoint is in the left sorted portion
            if (nums[mid] >= nums[l]) 
            {
                l = mid + 1; // try to move closer to right sorted array
            }
            else
            {
                r = mid - 1;
            }
        }

        return res;// Return the minimum value found
    }
};
