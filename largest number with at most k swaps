

class Solution
{
    public:
    void solve(string &str,string &res, int l,int h,int k)
    {
        if(k==0||l==h)
        {
            res=max(res,str);
            return;
        }
        for(int i=l+1;i<=h;i++)
        {
            char maxiChar = *max_element(str.begin()+i,str.end());
            if(str[i] > str[l] && str[i]==maxiChar)
            {
             swap(str[l],str[i]);
            solve(str,res,l+1,h,k-1);
            swap(str[l],str[i]);   swap(str[l],str[i]);
            solve(str,res,l+1,h,k-1);
            swap(str[l],str[i]);
            }
        }
        solve(str,res,l+1,h,k); // we added this to check results we are getting that are not specifically at leaf node level
    }
    //Function to find the largest number after k swaps.
    string findMaximumNum(string str, int k)
    {
       // code here.
       int l=0,h=str.size()-1;
       string res="";
       solve(str,res,l,h,k);
       return res;
    }
};
