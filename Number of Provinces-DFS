In any traversal technique, we have one starting node and it traverses all the nodes in the graph. 
Suppose there is an ‘N’ number of provinces so we need to call the traversal algorithm ‘N‘ times, i.e., 
there will be ‘N’ starting nodes. So, we just need to figure out the number of starting nodes.

Time - For an undirected graph, O(N) + O(2E), For a directed graph, O(N) + O(E), 
Because for every node we are calling the recursive function once, the time taken is O(N) and 2E is for total degrees as we traverse for all adjacent nodes.
Space - O(3N) ~ O(N), Space for dfs stack space, visited array and an adjacency list.




Code 
class Solution {
public:
    void dfs(vector<int>adj[],int vis[],int node)
    {
        vis[node]=1;
        for(auto it:adj[node])
            if(!vis[it])
                dfs(adj,vis,it);
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        vector<int>adj[isConnected.size()];
        for(int i=0;i<isConnected.size();i++)
        {
            for(int j=0;j<isConnected.size();j++)
            {
                if(isConnected[i][j]==1&&i!=j)
                {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int n=isConnected.size();
        int vis[n];
        for(int i=0;i<n;i++)
        {
            vis[i]=0;
        }
        int cnt=0;
        for(int i=0;i<n;i++)
        {
           if(!vis[i])
           {
            cnt++;
            dfs(adj,vis,i);
           }
        }
        return cnt;
    }
};

