class Solution {
public:
    int solve(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&dp)
    {
        if(i==0&&j==0)
            return grid[i][j];
        if(i<0||j<0)
            return 1e9;
        if(dp[i][j]!=1e9)
            return dp[i][j];
        int up=grid[i][j]+solve(i-1,j,grid,dp);
        int left=grid[i][j]+solve(i,j-1,grid,dp);
        return dp[i][j]=min(up,left);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size()-1,m=grid[0].size()-1;
        vector<vector<int>>dp(n+1,vector<int>(m+1,1e9));
        return solve(n,m,grid,dp);
    }
};


class Solution {
public:
    int solve(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&dp)
    {
        if(i==0&&j==0)
            return grid[i][j];
        if(i<0||j<0)
            return 1e9;
        if(dp[i][j]!=1e9)
            return dp[i][j];
        int up=grid[i][j]+solve(i-1,j,grid,dp);
        int left=grid[i][j]+solve(i,j-1,grid,dp);
        return dp[i][j]=min(up,left);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size()-1,m=grid[0].size()-1;
        vector<vector<int>>dp(n+1,vector<int>(m+1,1e9));
        return solve(n,m,grid,dp);
    }
};


class Solution {
public:
    int solve(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&dp)
    {
        if(i==0&&j==0)
            return grid[i][j];
        if(i<0||j<0)
            return 1e9;
        if(dp[i][j]!=1e9)
            return dp[i][j];
        int up=grid[i][j]+solve(i-1,j,grid,dp);
        int left=grid[i][j]+solve(i,j-1,grid,dp);
        return dp[i][j]=min(up,left);
    }
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size()-1,m=grid[0].size()-1;
        vector<int>prev(m+1,0);
        vector<vector<int>>dp(n+1,vector<int>(m+1,1e9));
        for(int i=0;i<=n;i++)
        {
            vector<int>temp(m+1,0);
            for(int j=0;j<=m;j++)
            {
                if(i==0&&j==0)
                {
                    temp[j]=grid[i][j];
                    continue;
                }
                int up=grid[i][j];
                if(i>0)
                    up=up+prev[j];
                else
                    up=1e9;
                int left=grid[i][j];
                if(j>0)
                    left=left+temp[j-1];
                else
                    left=1e9;
                temp[j]=min(up,left);
            }
            prev=temp;
        }
        return prev[m];
    }
};
