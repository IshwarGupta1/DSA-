
Time Complexity: O ( n x n ) x 4    

Reason: Worst-case - We will be making each fresh orange rotten in the grid and for each rotten orange will check in 4 directions

Space Complexity: O ( n x n )

Reason: worst-case -  If all oranges are Rotten, we will end up pushing all rotten oranges into the Queue data structure
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0)); 
        int tot=0;
        queue<pair<pair<int,int>,int>> q;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==2)
                {
                    q.push({{i,j},0});
                    vis[i][j]=2;
                }
                else
                    vis[i][j]=0;
            }
        }
        int tm=0;
        int dx[]={-1,0,1,0};
        int dy[]={0,1,0,-1};
        while(!q.empty())
        {
            auto p=q.front();
            int r=p.first.first;
            int c=p.first.second;
            int t=p.second;
            tm=max(tm,t);
            q.pop();
            for(int i=0;i<4;i++)
            {
                int nr=dx[i]+r;
                int nc=dy[i]+c;
                if(nr>=0&&nr<n&&nc>=0&&nc<m&&vis[nr][nc]!=2&&grid[nr][nc]==1)
                {
                    q.push({{nr,nc},t+1});
                    vis[nr][nc]=2;
                    grid[nr][nc]=2;

                }
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(vis[i][j]!=2&&grid[i][j]==1)
                    return -1;
            }
        }
        return tm;
    }
};
