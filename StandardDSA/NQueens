class Solution {
public:
    bool isSafe(int row,int col,vector<string>&board,int n)
    {
        int duprow = row;
        int dupcol = col;

        while (row >= 0 && col >= 0) {
            if (board[row][col] == 'Q')
            return false;
            row--;
            col--;
        }

        col = dupcol;
        row = duprow;
        while (col >= 0) {
            if (board[row][col] == 'Q')
            return false;
            col--;
        }

        row = duprow;
        col = dupcol;
        while (row < n && col >= 0) {
            if (board[row][col] == 'Q')
            return false;
            row++;
            col--;
        }
        return true;
    }
    void solve(vector<vector<string>>&res,vector<string>&board,int ind,int n)
    {
        if(ind==n)
        {
            res.push_back(board);
            return;
        }
        for(int i=0;i<n;i++)
        {
            if(isSafe(i,ind,board,n))
            {
                board[i][ind]='Q';
                solve(res,board,ind+1,n);
                board[i][ind]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>res;
        vector<string>board;
        int ind=0;
        string s(n,'.');
        for(int i=0;i<n;i++)
        {
            board.push_back(s);
        }
        solve(res,board,ind,n);
        return res;
    }
};
