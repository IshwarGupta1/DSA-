Time Complexity: O(V+E)+O(V), where V = no. of nodes and E = no. of edges. There can be at most V components. So, another O(V) time complexity.

Space Complexity: O(2N) + O(N) ~ O(2N): O(2N) for the visited array and the stack carried during DFS calls and O(N) for recursive stack space, where N = no. of nodes.

Time Complexity: O(V+E)+O(V), where V = no. of nodes and E = no. of edges. There can be at most V components. So, another O(V) time complexity.

class Solution
{
	public:
	void dfs(int node,int vis[],vector<int>adj[],stack<int>&st)
	{
	    vis[node]=1;
	    for(auto it:adj[node])
	    {
	        if(!vis[it])
	            dfs(it,vis,adj,st);
	    }
	    st.push(node);
	}
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
	    int vis[V]={0};
	    stack<int>st;
	    for(int i=0;i<V;i++)
	    {
	        if(!vis[i])
	            dfs(i,vis,adj,st);
	    }
	    vector<int>res;
	    while(st.size()>0)
	   {
	       res.push_back(st.top());
	       st.pop();
	   }
	   return res;
	}
};
