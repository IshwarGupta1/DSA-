#include <vector>
#include <algorithm>
#include <iostream>

class Solution {
public:
    int countSetBits(int n) {
        int count = 0;
        while (n > 0) {
            count += (n & 1);
            n >>= 1;
        }
        return count;
    }

    bool canSortArray(std::vector<int>& nums) {
        std::vector<std::vector<int>> res;
        std::vector<int> v;
        v.push_back(nums[0]);

        for (int i = 1; i < nums.size(); i++) {
            if (countSetBits(nums[i]) == countSetBits(v.back())) {
                v.push_back(nums[i]);
            } else {
                std::sort(v.begin(), v.end());
                res.push_back(v);
                v.clear();
                v.push_back(nums[i]);
            }
        }

        std::sort(v.begin(), v.end());
        res.push_back(v);
        for (int i = 0; i < res.size() - 1; i++) {
            int lastInCurrentGroup = res[i].back();
            int firstInNextGroup = res[i + 1].front();
            if (lastInCurrentGroup > firstInNextGroup)
                return false;
        }

        return true;
    }
};
